/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  CommissionPool,
  CommissionPoolInterface,
} from "../CommissionPool";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "galleryId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "payee",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "claimableBalance",
        type: "uint256",
      },
    ],
    name: "ClaimableUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "galleryId",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "galleryId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "payee",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "galleryId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "payee",
        type: "address",
      },
    ],
    name: "getClaimable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "galleryId",
        type: "uint256",
      },
    ],
    name: "getGalleryCommission",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "galleryId",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "payees",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "commissionRates",
        type: "uint256[]",
      },
    ],
    name: "setGalleryCommission",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576109fc908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c80631f63503a14610585578063379607f51461048557806337bcb2eb146103535780636e553f65146102ae578063b961cbe11461026d578063c4d66de8146101135763f2fde38b1461006e57600080fd5b3461010f57602036600319011261010f57610087610840565b60355491906001600160a01b03906100a28285163314610856565b169283156100bd5750506001600160a01b0319161760355580f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b503461010f57602036600319011261010f5761012d610840565b835460ff8160081c161592838094610260575b8015610249575b156101ef575060ff1981166001178555826101de575b50603580546001600160a01b0319166001600160a01b039290921691909117905582549061019a600883901c60ff16610195816108a1565b6108a1565b600180556101a6578280f35b61ff001916825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b61ffff19166101011784553861015d565b608490602086519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152fd5b50303b1580156101475750600160ff831614610147565b50600160ff831610610140565b503461010f578160031936011261010f57602092829161028b610825565b90358252603485528282206001600160a01b039091168252845220549051908152f35b5091908060031936011261034f578235906102c7610825565b6102cf610950565b828452603460209081528285206001600160a01b038316808752915282852080543481019190821061033c576000805160206109a78339815191529596975055848652603460205282862090865260205261033282862054925192839283610935565b0390a26001805580f35b634e487b7160e01b875260118852602487fd5b5080fd5b509134610482576020928360031936011261034f573581526033835281812090825161037e816107ba565b8351835480825284845286842087830191855b81811061046557505050816103a79103826107eb565b8152600180930194845191828288549182815201908198865283862090865b81811061045257505050836103dc9103846107eb565b8282820152519185519580870190875283518091528260608801940190855b81811061043657505050858303868301525180835291810195925b8281106104235785870386f35b8351875295810195928101928401610416565b82516001600160a01b03168652948401949184019187016103fb565b82548452928501929188019188016103c6565b82546001600160a01b031684529289019260019283019201610391565b80fd5b50903461010f57602080600319360112610581578235926104a4610950565b8385526034825282852033865282528285205490811561053e5784865260348352838620338752835283862080549183830392831161052b575086809381938293553382f115610521576000805160206109a783398151915291610332918486526034815281862090338752528085205490519182913383610935565b81513d85823e3d90fd5b634e487b7160e01b885260119052602487fd5b835162461bcd60e51b8152908101839052601e60248201527f496e73756666696369656e7420636c61696d61626c652062616c616e636500006044820152606490fd5b8380fd5b50903461010f57606036600319011261010f5760248035926001600160401b03929091908385116107b657366023860112156107b65784830135916105c98361080e565b956105d6835197886107eb565b838752602093828589019160051b830101913683116107b2578301905b828210610793575050506044359385851161078f573660238601121561078f5784810135946106218661080e565b9561062e855197886107eb565b808752838688019160051b8301019136831161078b5784879101915b83831061077b5750506035546001600160a01b0395925061066f915085163314610856565b80519761067b896107ba565b88528488019586528135895260338552882096519283519087821161076957600160401b948583116107575786906106b9848c81815491558d610901565b0190898b52868b20908b5b8481106107435750505050506001809701945192835196871161073157861161072057505081906106fa85855481875586610901565b0191855280852090855b84811061070f578680f35b835183820155928101928501610704565b634e487b7160e01b88526041905286fd5b50634e487b7160e01b88526041905286fd5b8351821683820155928801926001016106c4565b634e487b7160e01b8b5260418452848bfd5b634e487b7160e01b8a5260418352838afd5b823581529181019187910161064a565b8a80fd5b8780fd5b81356001600160a01b038116810361078b5781529085019085016105f3565b8980fd5b8580fd5b604081019081106001600160401b038211176107d557604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176107d557604052565b6001600160401b0381116107d55760051b60200190565b602435906001600160a01b038216820361083b57565b600080fd5b600435906001600160a01b038216820361083b57565b1561085d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156108a857565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b909182811061090f57505050565b60009182526020822092830192015b82811061092a57505050565b81815560010161091e565b6001600160a01b039091168152602081019190915260400190565b600260015414610961576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fdfeae8f8bf7a17e85228ceb45755da4f4caefd40f17bfad89e34e910a6f952c1700a26469706673582212209f5a444e4d65772f64f9a23c8705ead82d843e69573d6e3dcf9fd333612eade264736f6c63430008110033";

type CommissionPoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommissionPoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CommissionPool__factory extends ContractFactory {
  constructor(...args: CommissionPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CommissionPool> {
    return super.deploy(overrides || {}) as Promise<CommissionPool>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CommissionPool {
    return super.attach(address) as CommissionPool;
  }
  override connect(signer: Signer): CommissionPool__factory {
    return super.connect(signer) as CommissionPool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommissionPoolInterface {
    return new utils.Interface(_abi) as CommissionPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CommissionPool {
    return new Contract(address, _abi, signerOrProvider) as CommissionPool;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { SingleToken, SingleTokenInterface } from "../SingleToken";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_marketplace",
        type: "address",
      },
    ],
    name: "setMarketplace",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "supply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenOfOwnerByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657611be0908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a71461117f57508063047fc9aa14610f2a57806306fdde03146110d9578063081812fc146110b9578063095ea7b314610f4957806318160ddd14610f2a57806323b872dd14610f055780632f745c5914610e595780633540302314610e3957806342842e0e14610e055780634f6ccce714610d725780636352211e14610d4157806370a0823114610d1457806373ad6c2d14610cc957806390657147146108ec57806395d89b411461080b578063a22cb46514610756578063b88d4fde146106cd578063c87b56dd146105d1578063cd279c7c1461020c578063e985e9c5146101ba5763f2fde38b1461011557600080fd5b346101b65760203660031901126101b65761012e611245565b60fd5491906001600160a01b03906101498285163314611a74565b169283156101645750506001600160a01b0319161760fd5580f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461020857806003193601126102085760ff816020936101da611245565b6101e2611260565b6001600160a01b039182168352606a875283832091168252855220549151911615158152f35b5080fd5b5082903461020857606036600319011261020857610228611245565b926001600160401b03906044358281116105cd576102499036908501611351565b9060018060a01b036102608160fd54163314611a74565b6001928360fb5401948560fb55835195610279876112ab565b888752838a1696871561058a57899a61029e610298849c9a9b9c61187f565b15611b1f565b609954838a52808860209b609a8d522055600160401b81101561057757918361036d92818f8e9060678f8f8f6102fb876102e08e6103729f8601609955611a43565b90919082549060031b600019811b9283911b16911916179055565b6103048861136f565b8686526097845281862081875284528782872055878652609884528186205561032f6102988861187f565b85855260688352842080549091019055848352528c812080546001600160a01b03191683179055600080516020611b8b8339815191528180a461189c565b611566565b61037b8161187f565b1561051d57895260c9865283892091805191821161050a57819061039f8454611450565b601f81116104ba575b508790601f831160011461045b578b92610450575b5050600019600383901b1c191690851b1790555b60fc5416948585146104135750838652606a83528086208587528352808620805460ff19168317905551908152600080516020611b6b8339815191529190a380f35b83606492519162461bcd60e51b8352820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152fd5b015190508a806103bd565b848c52888c208894509190601f1984168d5b8b8282106104a4575050841161048b575b505050811b0190556103d1565b015160001960f88460031b161c191690558a808061047e565b8385015186558b9790950194938401930161046d565b909150838b52878b20601f840160051c810191898510610500575b84939291601f8a920160051c01915b8281106104f25750506103a8565b8d81558594508991016104e4565b90915081906104d5565b634e487b7160e01b8a526041895260248afd5b845162461bcd60e51b8152808a01889052602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608490fd5b634e487b7160e01b8d5260418c5260248dfd5b855162461bcd60e51b81526020818b0181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606490fd5b8480fd5b5090346101b657602091826003193601126106c957356105f86105f38261187f565b6113e6565b835260c9825280832092815180948290805461061381611450565b918285526001918883821691826000146106a2575050600114610664575b5050506106609392916106459103866112dc565b8151610650816112ab565b5251928284938452830190611205565b0390f35b8552868520879350859291905b82841061068a5750505082010181610645610660610631565b8054848b018601528995508894909301928101610671565b60ff19168782015293151560051b8601909301935084925061064591506106609050610631565b8380fd5b838234610208576080366003190112610208576106e8611245565b906106f1611260565b6064359290604435906001600160401b03851161075257366023860112156107525761072c61036d9486602461074f9836930135910161131a565b9261073f61073a843361158a565b6114b1565b61074a838383611652565b6119b8565b80f35b8580fd5b5090346101b657806003193601126101b657610770611245565b90602435918215158093036105cd576001600160a01b0316923384146107cd5750338452606a60205280842083855260205280842060ff1981541660ff841617905551908152600080516020611b6b83398151915260203392a380f35b6020606492519162461bcd60e51b8352820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152fd5b5050346102085781600319360112610208578051908260665461082d81611450565b808552906001908181169081156108c4575060011461086b575b505050610859826106609403836112dc565b51918291602083526020830190611205565b60668352602095507f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943545b8284106108b15750505082610660946108599282010194610847565b8054868501880152928601928101610895565b61066097506108599450602092508693915060ff191682840152151560051b82010194610847565b50346101b65760603660031901126101b657610906611245565b906001600160401b03602435818111610752576109269036908401611351565b604435828111610cc55761093d9036908501611351565b86549360ff8560081c161595868097610cb8575b8015610ca1575b15610c4757600195878760ff198316178b55610c36575b5060fd80546001600160a01b0319166001600160a01b039290921691909117905587546109aa9060081c60ff166109a581611abf565b611abf565b8251848111610c2357806109bf606554611450565b94601f95868111610bd2575b50602090868311600114610b71578b92610b66575b5050600019600383901b1c191690861b176065555b8151938411610b535750908291610a0d606654611450565b828111610b00575b506020918311600114610a9f578792610a94575b5050600019600383901b1c191690821b176066555b835491610a5460ff8460081c166109a581611abf565b610a5c578380f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989260209261ff001916855551908152a13880808380f35b015190503880610a29565b606688528188208594509190601f198416895b818110610ae857508411610acf575b505050811b01606655610a3e565b015160001960f88460031b161c19169055388080610ac1565b82840151855587969094019360209384019301610ab2565b9091925060668852602088208380860160051c82019260208710610b4a575b91869588929594930160051c01915b828110610b3c575050610a15565b8a8155869550879101610b2e565b92508192610b1f565b634e487b7160e01b885260419052602487fd5b0151905038806109e0565b60658c52818c208994509190601f1984168d5b818110610bba57508411610ba1575b505050811b016065556109f5565b015160001960f88460031b161c19169055388080610b93565b8284015185558b969094019360209384019301610b84565b90915060658b5260208b208680850160051c82019260208610610c1a575b918a91869594930160051c01915b828110610c0c5750506109cb565b8d81558594508a9101610bfe565b92508192610bf0565b634e487b7160e01b895260418252602489fd5b61ffff19166101011789553861096f565b875162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156109585750600160ff871614610958565b50600160ff871610610951565b8680fd5b8334610d11576020366003190112610d1157610ce3611245565b60fd546001600160a01b039190610cfd9083163314611a74565b1660018060a01b031960fc54161760fc5580f35b80fd5b50503461020857602036600319011261020857602090610d3a610d35611245565b61136f565b9051908152f35b509134610d11576020366003190112610d115750610d616020923561142d565b90516001600160a01b039091168152f35b508234610d11576020366003190112610d115750803590609954821015610dad57602083610d9f84611a43565b91905490519160031b1c8152f35b608490602084519162461bcd60e51b8352820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152fd5b5050346102085761036d61074f91610e1c36611276565b91925192610e29846112ab565b86845261073f61073a843361158a565b505034610208576020366003190112610208576020906099549051908152f35b509134610d115781600319360112610d1157610e73611245565b60243590610e808161136f565b821015610eae576001600160a01b031682526097602090815283832091835290815290829020548251908152f35b835162461bcd60e51b8152602081870152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b8334610d115761074f610f1736611276565b91610f2561073a843361158a565b611652565b5050346102085781600319360112610208576020906099549051908152f35b50346101b657816003193601126101b657610f62611245565b6024359290916001600160a01b0391908280610f7d8761142d565b1694169380851461106c5780331490811561104d575b5015610fe557508385526069602052842080546001600160a01b03191683179055610fbd8361142d565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b6020608492519162461bcd60e51b8352820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152fd5b90508652606a60205281862033875260205260ff828720541638610f93565b506020608492519162461bcd60e51b8352820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152fd5b509134610d11576020366003190112610d115750610d616020923561148a565b505034610208578160031936011261020857805190826065546110fb81611450565b808552906001908181169081156108c4575060011461112657505050610859826106609403836112dc565b60658352602095507f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c75b82841061116c5750505082610660946108599282010194610847565b8054868501880152928601928101611150565b925050346101b65760203660031901126101b6573563ffffffff60e01b81168091036101b6576020925063780e9d6360e01b81149081156111c2575b5015158152f35b6380ac58cd60e01b8114915081156111f4575b81156111e3575b50386111bb565b6301ffc9a760e01b149050386111dc565b635b5e139f60e01b811491506111d5565b919082519283825260005b848110611231575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611210565b600435906001600160a01b038216820361125b57565b600080fd5b602435906001600160a01b038216820361125b57565b606090600319011261125b576001600160a01b0390600435828116810361125b5791602435908116810361125b579060443590565b602081019081106001600160401b038211176112c657604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176112c657604052565b6001600160401b0381116112c657601f01601f191660200190565b929192611326826112ff565b9161133460405193846112dc565b82948184528183011161125b578281602093846000960137010152565b9080601f8301121561125b5781602061136c9335910161131a565b90565b6001600160a01b0316801561138f57600052606860205260406000205490565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b156113ed57565b60405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606490fd5b6000908152606760205260409020546001600160a01b031661136c8115156113e6565b90600182811c92168015611480575b602083101461146a57565b634e487b7160e01b600052602260045260246000fd5b91607f169161145f565b6114966105f38261187f565b6000908152606960205260409020546001600160a01b031690565b156114b857565b60405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608490fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b1561156d57565b60405162461bcd60e51b81528061158660048201611513565b0390fd5b906001600160a01b03808061159e8461142d565b169316918383149384156115d1575b5083156115bb575b50505090565b6115c79192935061148a565b16143880806115b5565b909350600052606a60205260406000208260005260205260ff6040600020541692386115ad565b156115ff57565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b6116769161165f8461142d565b6001600160a01b03938484169391851684146115f8565b83821693841561182e5783918261177557506099546000878152609a602052604090208190559150600160401b8210156112c6576116dc926116c3876102e0856001899701609955611a43565b828603611742575b506116d58661142d565b16146115f8565b600080516020611b8b833981519152600084815260696020526040812060018060a01b03199081815416905583825260686020526040822060001981540190558482526040822060018154019055858252606760205284604083209182541617905580a4565b61174b9061136f565b604060008781526097602052818120838252602052888282205588815260986020522055386116cb565b858303611787575b506116dc926116c3565b61179291925061136f565b600019810191908211611818576116dc92849260009088825260209060988252604091828420548281036117e1575b508a8452838381205586845260978152828420918452528120559261177d565b87855260978252838520838652825283852054888652609783528486208287528352808587205585526098825283852055386117c1565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b6000908152606760205260409020546001600160a01b0316151590565b9192600092909190803b156119ae576118ea946040518092630a85bd0160e11b9485835233600484015287602484015260448301526080606483015281878160209a8b966084830190611205565b03926001600160a01b03165af184918161196e575b5061195d575050503d600014611955573d611919816112ff565b9061192760405192836112dc565b81528091833d92013e5b805191826119525760405162461bcd60e51b81528061158660048201611513565b01fd5b506060611931565b6001600160e01b0319161492509050565b9091508581813d83116119a7575b61198681836112dc565b810103126105cd57516001600160e01b0319811681036105cd5790386118ff565b503d61197c565b5050915050600190565b9293600093909291803b15611a3857948491611a129660405180948193630a85bd0160e11b9788845233600485015260018060a01b0380921660248501526044840152608060648401528260209b8c976084830190611205565b0393165af184918161196e575061195d575050503d600014611955573d611919816112ff565b505050915050600190565b609954811015611a5e57609960005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b15611a7b57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611ac657565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b15611b2657565b60405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b6044820152606490fdfe17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220823b1d1968b6ae2e004cae0a2dbbb09b192e7b3a50eb3f2a57c658e2abdc308864736f6c63430008110033";

type SingleTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SingleTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SingleToken__factory extends ContractFactory {
  constructor(...args: SingleTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SingleToken> {
    return super.deploy(overrides || {}) as Promise<SingleToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SingleToken {
    return super.attach(address) as SingleToken;
  }
  override connect(signer: Signer): SingleToken__factory {
    return super.connect(signer) as SingleToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SingleTokenInterface {
    return new utils.Interface(_abi) as SingleTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SingleToken {
    return new Contract(address, _abi, signerOrProvider) as SingleToken;
  }
}

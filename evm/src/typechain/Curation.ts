/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Curation {
  export type GalleryStruct = {
    id: PromiseOrValue<BigNumberish>;
    collection: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    spaceType: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    metadataUri: PromiseOrValue<string>;
    commissionPool: PromiseOrValue<string>;
  };

  export type GalleryStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string
  ] & {
    id: BigNumber;
    collection: string;
    tokenId: BigNumber;
    owner: string;
    spaceType: string;
    name: string;
    metadataUri: string;
    commissionPool: string;
  };

  export type ExhibitStruct = {
    id: PromiseOrValue<BigNumberish>;
    galleryId: PromiseOrValue<BigNumberish>;
    collection: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    origin: PromiseOrValue<string>;
    expiration: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    location: PromiseOrValue<string>;
    url: PromiseOrValue<string>;
    detail: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type ExhibitStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    number
  ] & {
    id: BigNumber;
    galleryId: BigNumber;
    collection: string;
    tokenId: BigNumber;
    origin: string;
    expiration: BigNumber;
    price: BigNumber;
    location: string;
    url: string;
    detail: string;
    status: number;
  };

  export type OfferStruct = {
    id: PromiseOrValue<BigNumberish>;
    collection: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    galleryId: PromiseOrValue<BigNumberish>;
    offerStartAt: PromiseOrValue<BigNumberish>;
    offerExpiredAt: PromiseOrValue<BigNumberish>;
    exhibitExpiredAt: PromiseOrValue<BigNumberish>;
    url: PromiseOrValue<string>;
    detail: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type OfferStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    number
  ] & {
    id: BigNumber;
    collection: string;
    tokenId: BigNumber;
    from: string;
    to: string;
    price: BigNumber;
    galleryId: BigNumber;
    offerStartAt: BigNumber;
    offerExpiredAt: BigNumber;
    exhibitExpiredAt: BigNumber;
    url: string;
    detail: string;
    status: number;
  };
}

export interface CurationInterface extends utils.Interface {
  functions: {
    "buy(uint256,uint256)": FunctionFragment;
    "cancel(uint256,uint256)": FunctionFragment;
    "cancelOffer(uint256)": FunctionFragment;
    "createGallery(address,uint256,string,string,string,bool,address[],uint256[])": FunctionFragment;
    "exhibits(uint256)": FunctionFragment;
    "freeze(uint256,uint256)": FunctionFragment;
    "galleries(uint256)": FunctionFragment;
    "getCuratorGalleries(address)": FunctionFragment;
    "getGalleryExhibits(uint256)": FunctionFragment;
    "getReceivedOffers()": FunctionFragment;
    "getSentOffers()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "list(uint256,uint256,string)": FunctionFragment;
    "listOwned(uint256,address,uint256,uint256,string)": FunctionFragment;
    "offers(uint256)": FunctionFragment;
    "redeemForce(uint256,uint256)": FunctionFragment;
    "redeemRequests(uint256)": FunctionFragment;
    "redeemWithFreeze(uint256,uint256)": FunctionFragment;
    "replyOffer(uint256,bool)": FunctionFragment;
    "sendOffer(address,uint256,uint256,uint256,uint64,uint64,string,string)": FunctionFragment;
    "setWhitelist(address,bool)": FunctionFragment;
    "toggleWhitelist(bool)": FunctionFragment;
    "tokenHashToOfferIds(bytes32,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBaseFeeRate(uint256)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buy"
      | "cancel"
      | "cancelOffer"
      | "createGallery"
      | "exhibits"
      | "freeze"
      | "galleries"
      | "getCuratorGalleries"
      | "getGalleryExhibits"
      | "getReceivedOffers"
      | "getSentOffers"
      | "initialize"
      | "list"
      | "listOwned"
      | "offers"
      | "redeemForce"
      | "redeemRequests"
      | "redeemWithFreeze"
      | "replyOffer"
      | "sendOffer"
      | "setWhitelist"
      | "toggleWhitelist"
      | "tokenHashToOfferIds"
      | "transferOwnership"
      | "updateBaseFeeRate"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGallery",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exhibits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "freeze",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "galleries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCuratorGalleries",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGalleryExhibits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceivedOffers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSentOffers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listOwned",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemForce",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemRequests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWithFreeze",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "replyOffer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleWhitelist",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenHashToOfferIds",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseFeeRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGallery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exhibits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "galleries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCuratorGalleries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGalleryExhibits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceivedOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSentOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listOwned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemForce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemWithFreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "replyOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenHashToOfferIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "ExhibitCanceled(uint256,uint256,address,uint256,address,uint64)": EventFragment;
    "ExhibitFrozen(uint256,uint256,address,uint256,address,uint64)": EventFragment;
    "ExhibitListed(uint256,uint256,address,uint256,address,uint64,uint256,string,string,string,uint64)": EventFragment;
    "ExhibitRedeemed(uint256,uint256,address,uint256,address,uint64)": EventFragment;
    "ExhibitSold(uint256,uint256,address,uint256,address,uint256,uint64)": EventFragment;
    "GalleryCreated(uint256,address,uint256,address,string,string,string,bool,uint64,address[],uint256[],address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OfferAccepted(uint256,address,uint256,address,address,uint256,uint256,uint256,uint64,uint64)": EventFragment;
    "OfferCanceled(uint256,address,uint256,address,address,uint64)": EventFragment;
    "OfferCreated(uint256,address,uint256,address,address,uint256,uint256,uint64,uint64,uint64,string,string)": EventFragment;
    "OfferRejected(uint256,address,uint256,address,address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExhibitCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExhibitFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExhibitListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExhibitRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExhibitSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GalleryCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferRejected"): EventFragment;
}

export interface ExhibitCanceledEventObject {
  id: BigNumber;
  galleryId: BigNumber;
  collection: string;
  tokenId: BigNumber;
  origin: string;
  timestamp: BigNumber;
}
export type ExhibitCanceledEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string, BigNumber],
  ExhibitCanceledEventObject
>;

export type ExhibitCanceledEventFilter = TypedEventFilter<ExhibitCanceledEvent>;

export interface ExhibitFrozenEventObject {
  id: BigNumber;
  galleryId: BigNumber;
  collection: string;
  tokenId: BigNumber;
  origin: string;
  timestamp: BigNumber;
}
export type ExhibitFrozenEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string, BigNumber],
  ExhibitFrozenEventObject
>;

export type ExhibitFrozenEventFilter = TypedEventFilter<ExhibitFrozenEvent>;

export interface ExhibitListedEventObject {
  id: BigNumber;
  galleryId: BigNumber;
  collection: string;
  tokenId: BigNumber;
  origin: string;
  expiration: BigNumber;
  price: BigNumber;
  location: string;
  url: string;
  detail: string;
  timestamp: BigNumber;
}
export type ExhibitListedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber
  ],
  ExhibitListedEventObject
>;

export type ExhibitListedEventFilter = TypedEventFilter<ExhibitListedEvent>;

export interface ExhibitRedeemedEventObject {
  id: BigNumber;
  galleryId: BigNumber;
  collection: string;
  tokenId: BigNumber;
  origin: string;
  timestamp: BigNumber;
}
export type ExhibitRedeemedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string, BigNumber],
  ExhibitRedeemedEventObject
>;

export type ExhibitRedeemedEventFilter = TypedEventFilter<ExhibitRedeemedEvent>;

export interface ExhibitSoldEventObject {
  id: BigNumber;
  galleryId: BigNumber;
  collection: string;
  tokenId: BigNumber;
  origin: string;
  price: BigNumber;
  timestamp: BigNumber;
}
export type ExhibitSoldEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string, BigNumber, BigNumber],
  ExhibitSoldEventObject
>;

export type ExhibitSoldEventFilter = TypedEventFilter<ExhibitSoldEvent>;

export interface GalleryCreatedEventObject {
  id: BigNumber;
  collection: string;
  tokenId: BigNumber;
  owner: string;
  spaceType: string;
  name: string;
  metadataUri: string;
  isToken: boolean;
  timestamp: BigNumber;
  payees: string[];
  commissionRates: BigNumber[];
  commissionPool: string;
}
export type GalleryCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    boolean,
    BigNumber,
    string[],
    BigNumber[],
    string
  ],
  GalleryCreatedEventObject
>;

export type GalleryCreatedEventFilter = TypedEventFilter<GalleryCreatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OfferAcceptedEventObject {
  id: BigNumber;
  collection: string;
  tokenId: BigNumber;
  from: string;
  to: string;
  price: BigNumber;
  galleryId: BigNumber;
  exhibitId: BigNumber;
  exhibitExpiredAt: BigNumber;
  timestamp: BigNumber;
}
export type OfferAcceptedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  OfferAcceptedEventObject
>;

export type OfferAcceptedEventFilter = TypedEventFilter<OfferAcceptedEvent>;

export interface OfferCanceledEventObject {
  id: BigNumber;
  collection: string;
  tokenId: BigNumber;
  from: string;
  to: string;
  timestamp: BigNumber;
}
export type OfferCanceledEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber],
  OfferCanceledEventObject
>;

export type OfferCanceledEventFilter = TypedEventFilter<OfferCanceledEvent>;

export interface OfferCreatedEventObject {
  id: BigNumber;
  collection: string;
  tokenId: BigNumber;
  from: string;
  to: string;
  price: BigNumber;
  galleryId: BigNumber;
  offerStartAt: BigNumber;
  offerExpiredAt: BigNumber;
  exhibitExpiredAt: BigNumber;
  url: string;
  detail: string;
}
export type OfferCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ],
  OfferCreatedEventObject
>;

export type OfferCreatedEventFilter = TypedEventFilter<OfferCreatedEvent>;

export interface OfferRejectedEventObject {
  id: BigNumber;
  collection: string;
  tokenId: BigNumber;
  from: string;
  to: string;
  timestamp: BigNumber;
}
export type OfferRejectedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber],
  OfferRejectedEventObject
>;

export type OfferRejectedEventFilter = TypedEventFilter<OfferRejectedEvent>;

export interface Curation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buy(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGallery(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      spaceType: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataUri: PromiseOrValue<string>,
      isToken: PromiseOrValue<boolean>,
      payees: PromiseOrValue<string>[],
      commissionRates: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exhibits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        number
      ] & {
        id: BigNumber;
        galleryId: BigNumber;
        collection: string;
        tokenId: BigNumber;
        origin: string;
        expiration: BigNumber;
        price: BigNumber;
        location: string;
        url: string;
        detail: string;
        status: number;
      }
    >;

    freeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    galleries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, string, string, string] & {
        id: BigNumber;
        collection: string;
        tokenId: BigNumber;
        owner: string;
        spaceType: string;
        name: string;
        metadataUri: string;
        commissionPool: string;
      }
    >;

    getCuratorGalleries(
      curator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Curation.GalleryStructOutput[]]>;

    getGalleryExhibits(
      galleryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Curation.ExhibitStructOutput[]]>;

    getReceivedOffers(
      overrides?: CallOverrides
    ): Promise<[Curation.OfferStructOutput[]]>;

    getSentOffers(
      overrides?: CallOverrides
    ): Promise<[Curation.OfferStructOutput[]]>;

    initialize(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    list(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listOwned(
      galleryId: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number
      ] & {
        id: BigNumber;
        collection: string;
        tokenId: BigNumber;
        from: string;
        to: string;
        price: BigNumber;
        galleryId: BigNumber;
        offerStartAt: BigNumber;
        offerExpiredAt: BigNumber;
        exhibitExpiredAt: BigNumber;
        url: string;
        detail: string;
        status: number;
      }
    >;

    redeemForce(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        galleryId: BigNumber;
        createAt: BigNumber;
        endAt: BigNumber;
      }
    >;

    redeemWithFreeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replyOffer(
      offerId: PromiseOrValue<BigNumberish>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      galleryId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      offerDuration: PromiseOrValue<BigNumberish>,
      exhibitExpiredAt: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      detail: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      curator: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleWhitelist(
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenHashToOfferIds(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBaseFeeRate(
      newFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  buy(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGallery(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    spaceType: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    metadataUri: PromiseOrValue<string>,
    isToken: PromiseOrValue<boolean>,
    payees: PromiseOrValue<string>[],
    commissionRates: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exhibits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      number
    ] & {
      id: BigNumber;
      galleryId: BigNumber;
      collection: string;
      tokenId: BigNumber;
      origin: string;
      expiration: BigNumber;
      price: BigNumber;
      location: string;
      url: string;
      detail: string;
      status: number;
    }
  >;

  freeze(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  galleries(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, string, string, string, string] & {
      id: BigNumber;
      collection: string;
      tokenId: BigNumber;
      owner: string;
      spaceType: string;
      name: string;
      metadataUri: string;
      commissionPool: string;
    }
  >;

  getCuratorGalleries(
    curator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Curation.GalleryStructOutput[]>;

  getGalleryExhibits(
    galleryId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Curation.ExhibitStructOutput[]>;

  getReceivedOffers(
    overrides?: CallOverrides
  ): Promise<Curation.OfferStructOutput[]>;

  getSentOffers(
    overrides?: CallOverrides
  ): Promise<Curation.OfferStructOutput[]>;

  initialize(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  list(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    location: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listOwned(
    galleryId: PromiseOrValue<BigNumberish>,
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    location: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  offers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      number
    ] & {
      id: BigNumber;
      collection: string;
      tokenId: BigNumber;
      from: string;
      to: string;
      price: BigNumber;
      galleryId: BigNumber;
      offerStartAt: BigNumber;
      offerExpiredAt: BigNumber;
      exhibitExpiredAt: BigNumber;
      url: string;
      detail: string;
      status: number;
    }
  >;

  redeemForce(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemRequests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      galleryId: BigNumber;
      createAt: BigNumber;
      endAt: BigNumber;
    }
  >;

  redeemWithFreeze(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replyOffer(
    offerId: PromiseOrValue<BigNumberish>,
    accept: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendOffer(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    galleryId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    offerDuration: PromiseOrValue<BigNumberish>,
    exhibitExpiredAt: PromiseOrValue<BigNumberish>,
    url: PromiseOrValue<string>,
    detail: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    curator: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleWhitelist(
    enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenHashToOfferIds(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBaseFeeRate(
    newFeeRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    buy(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGallery(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      spaceType: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataUri: PromiseOrValue<string>,
      isToken: PromiseOrValue<boolean>,
      payees: PromiseOrValue<string>[],
      commissionRates: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    exhibits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        number
      ] & {
        id: BigNumber;
        galleryId: BigNumber;
        collection: string;
        tokenId: BigNumber;
        origin: string;
        expiration: BigNumber;
        price: BigNumber;
        location: string;
        url: string;
        detail: string;
        status: number;
      }
    >;

    freeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    galleries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, string, string, string, string] & {
        id: BigNumber;
        collection: string;
        tokenId: BigNumber;
        owner: string;
        spaceType: string;
        name: string;
        metadataUri: string;
        commissionPool: string;
      }
    >;

    getCuratorGalleries(
      curator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Curation.GalleryStructOutput[]>;

    getGalleryExhibits(
      galleryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Curation.ExhibitStructOutput[]>;

    getReceivedOffers(
      overrides?: CallOverrides
    ): Promise<Curation.OfferStructOutput[]>;

    getSentOffers(
      overrides?: CallOverrides
    ): Promise<Curation.OfferStructOutput[]>;

    initialize(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    list(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listOwned(
      galleryId: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number
      ] & {
        id: BigNumber;
        collection: string;
        tokenId: BigNumber;
        from: string;
        to: string;
        price: BigNumber;
        galleryId: BigNumber;
        offerStartAt: BigNumber;
        offerExpiredAt: BigNumber;
        exhibitExpiredAt: BigNumber;
        url: string;
        detail: string;
        status: number;
      }
    >;

    redeemForce(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        galleryId: BigNumber;
        createAt: BigNumber;
        endAt: BigNumber;
      }
    >;

    redeemWithFreeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    replyOffer(
      offerId: PromiseOrValue<BigNumberish>,
      accept: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      galleryId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      offerDuration: PromiseOrValue<BigNumberish>,
      exhibitExpiredAt: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      detail: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(
      curator: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleWhitelist(
      enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenHashToOfferIds(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBaseFeeRate(
      newFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ExhibitCanceled(uint256,uint256,address,uint256,address,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      timestamp?: null
    ): ExhibitCanceledEventFilter;
    ExhibitCanceled(
      id?: PromiseOrValue<BigNumberish> | null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      timestamp?: null
    ): ExhibitCanceledEventFilter;

    "ExhibitFrozen(uint256,uint256,address,uint256,address,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      timestamp?: null
    ): ExhibitFrozenEventFilter;
    ExhibitFrozen(
      id?: PromiseOrValue<BigNumberish> | null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      timestamp?: null
    ): ExhibitFrozenEventFilter;

    "ExhibitListed(uint256,uint256,address,uint256,address,uint64,uint256,string,string,string,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      expiration?: null,
      price?: null,
      location?: null,
      url?: null,
      detail?: null,
      timestamp?: null
    ): ExhibitListedEventFilter;
    ExhibitListed(
      id?: PromiseOrValue<BigNumberish> | null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      expiration?: null,
      price?: null,
      location?: null,
      url?: null,
      detail?: null,
      timestamp?: null
    ): ExhibitListedEventFilter;

    "ExhibitRedeemed(uint256,uint256,address,uint256,address,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      timestamp?: null
    ): ExhibitRedeemedEventFilter;
    ExhibitRedeemed(
      id?: PromiseOrValue<BigNumberish> | null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      timestamp?: null
    ): ExhibitRedeemedEventFilter;

    "ExhibitSold(uint256,uint256,address,uint256,address,uint256,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      price?: null,
      timestamp?: null
    ): ExhibitSoldEventFilter;
    ExhibitSold(
      id?: PromiseOrValue<BigNumberish> | null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      price?: null,
      timestamp?: null
    ): ExhibitSoldEventFilter;

    "GalleryCreated(uint256,address,uint256,address,string,string,string,bool,uint64,address[],uint256[],address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      collection?: null,
      tokenId?: null,
      owner?: null,
      spaceType?: null,
      name?: null,
      metadataUri?: null,
      isToken?: null,
      timestamp?: null,
      payees?: null,
      commissionRates?: null,
      commissionPool?: null
    ): GalleryCreatedEventFilter;
    GalleryCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      collection?: null,
      tokenId?: null,
      owner?: null,
      spaceType?: null,
      name?: null,
      metadataUri?: null,
      isToken?: null,
      timestamp?: null,
      payees?: null,
      commissionRates?: null,
      commissionPool?: null
    ): GalleryCreatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OfferAccepted(uint256,address,uint256,address,address,uint256,uint256,uint256,uint64,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      collection?: null,
      tokenId?: null,
      from?: null,
      to?: null,
      price?: null,
      galleryId?: null,
      exhibitId?: null,
      exhibitExpiredAt?: null,
      timestamp?: null
    ): OfferAcceptedEventFilter;
    OfferAccepted(
      id?: PromiseOrValue<BigNumberish> | null,
      collection?: null,
      tokenId?: null,
      from?: null,
      to?: null,
      price?: null,
      galleryId?: null,
      exhibitId?: null,
      exhibitExpiredAt?: null,
      timestamp?: null
    ): OfferAcceptedEventFilter;

    "OfferCanceled(uint256,address,uint256,address,address,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      collection?: null,
      tokenId?: null,
      from?: null,
      to?: null,
      timestamp?: null
    ): OfferCanceledEventFilter;
    OfferCanceled(
      id?: PromiseOrValue<BigNumberish> | null,
      collection?: null,
      tokenId?: null,
      from?: null,
      to?: null,
      timestamp?: null
    ): OfferCanceledEventFilter;

    "OfferCreated(uint256,address,uint256,address,address,uint256,uint256,uint64,uint64,uint64,string,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      collection?: null,
      tokenId?: null,
      from?: null,
      to?: null,
      price?: null,
      galleryId?: null,
      offerStartAt?: null,
      offerExpiredAt?: null,
      exhibitExpiredAt?: null,
      url?: null,
      detail?: null
    ): OfferCreatedEventFilter;
    OfferCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      collection?: null,
      tokenId?: null,
      from?: null,
      to?: null,
      price?: null,
      galleryId?: null,
      offerStartAt?: null,
      offerExpiredAt?: null,
      exhibitExpiredAt?: null,
      url?: null,
      detail?: null
    ): OfferCreatedEventFilter;

    "OfferRejected(uint256,address,uint256,address,address,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      collection?: null,
      tokenId?: null,
      from?: null,
      to?: null,
      timestamp?: null
    ): OfferRejectedEventFilter;
    OfferRejected(
      id?: PromiseOrValue<BigNumberish> | null,
      collection?: null,
      tokenId?: null,
      from?: null,
      to?: null,
      timestamp?: null
    ): OfferRejectedEventFilter;
  };

  estimateGas: {
    buy(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGallery(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      spaceType: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataUri: PromiseOrValue<string>,
      isToken: PromiseOrValue<boolean>,
      payees: PromiseOrValue<string>[],
      commissionRates: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exhibits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    galleries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCuratorGalleries(
      curator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGalleryExhibits(
      galleryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceivedOffers(overrides?: CallOverrides): Promise<BigNumber>;

    getSentOffers(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    list(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listOwned(
      galleryId: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemForce(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemWithFreeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replyOffer(
      offerId: PromiseOrValue<BigNumberish>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      galleryId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      offerDuration: PromiseOrValue<BigNumberish>,
      exhibitExpiredAt: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      detail: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      curator: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleWhitelist(
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenHashToOfferIds(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBaseFeeRate(
      newFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGallery(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      spaceType: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataUri: PromiseOrValue<string>,
      isToken: PromiseOrValue<boolean>,
      payees: PromiseOrValue<string>[],
      commissionRates: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exhibits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    galleries(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCuratorGalleries(
      curator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGalleryExhibits(
      galleryId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceivedOffers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSentOffers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    list(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listOwned(
      galleryId: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemForce(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemRequests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemWithFreeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replyOffer(
      offerId: PromiseOrValue<BigNumberish>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      galleryId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      offerDuration: PromiseOrValue<BigNumberish>,
      exhibitExpiredAt: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      detail: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      curator: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleWhitelist(
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenHashToOfferIds(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBaseFeeRate(
      newFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CurationInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "batchList(uint256[],uint256[])": FunctionFragment;
    "batchListOwned(uint256[],address[],uint256[],uint256[])": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "cancel(uint256,uint256)": FunctionFragment;
    "cancelOffer(uint256)": FunctionFragment;
    "createGallery(address,uint256,string,string,string,bool,address[],uint256[],address[])": FunctionFragment;
    "freeze(uint256,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "list(uint256,uint256,string)": FunctionFragment;
    "listOwned(uint256,address,uint256,uint256,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "redeemForce(uint256,uint256)": FunctionFragment;
    "redeemWithFreeze(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replyOffer(uint256,bool)": FunctionFragment;
    "sendOffer(address,uint256,uint256,uint256,uint64,uint64,string,string)": FunctionFragment;
    "setWhitelist(address,bool)": FunctionFragment;
    "toggleWhitelist(bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBaseFeeRate(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "batchList"
      | "batchListOwned"
      | "buy"
      | "cancel"
      | "cancelOffer"
      | "createGallery"
      | "freeze"
      | "initialize"
      | "list"
      | "listOwned"
      | "owner"
      | "pendingOwner"
      | "redeemForce"
      | "redeemWithFreeze"
      | "renounceOwnership"
      | "replyOffer"
      | "sendOffer"
      | "setWhitelist"
      | "toggleWhitelist"
      | "transferOwnership"
      | "updateBaseFeeRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchList",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchListOwned",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGallery",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freeze",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listOwned",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemForce",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWithFreeze",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replyOffer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleWhitelist",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseFeeRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchListOwned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGallery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listOwned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemForce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemWithFreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "replyOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseFeeRate",
    data: BytesLike
  ): Result;

  events: {
    "ExhibitChanged(uint256,string,uint256,address,uint256,address,uint64,uint256,string,string,string,uint64)": EventFragment;
    "GalleryChanged(uint256,string,address,uint256,address,string,string,string,bool,uint64,address[],uint256[],address,address[])": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OfferChanged(uint256,string,address,uint256,address,address,uint256,uint256,uint64,uint64,uint64,string,string,uint64)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExhibitChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GalleryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ExhibitChangedEventObject {
  id: BigNumber;
  eventType: string;
  galleryId: BigNumber;
  collection: string;
  tokenId: BigNumber;
  origin: string;
  expiration: BigNumber;
  price: BigNumber;
  location: string;
  url: string;
  detail: string;
  timestamp: BigNumber;
}
export type ExhibitChangedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber
  ],
  ExhibitChangedEventObject
>;

export type ExhibitChangedEventFilter = TypedEventFilter<ExhibitChangedEvent>;

export interface GalleryChangedEventObject {
  id: BigNumber;
  eventType: string;
  collection: string;
  tokenId: BigNumber;
  owner: string;
  spaceType: string;
  name: string;
  metadataUri: string;
  isToken: boolean;
  timestamp: BigNumber;
  payees: string[];
  commissionRates: BigNumber[];
  commissionPool: string;
  admissions: string[];
}
export type GalleryChangedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    boolean,
    BigNumber,
    string[],
    BigNumber[],
    string,
    string[]
  ],
  GalleryChangedEventObject
>;

export type GalleryChangedEventFilter = TypedEventFilter<GalleryChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OfferChangedEventObject {
  id: BigNumber;
  eventType: string;
  collection: string;
  tokenId: BigNumber;
  from: string;
  to: string;
  price: BigNumber;
  galleryId: BigNumber;
  offerStartAt: BigNumber;
  offerExpiredAt: BigNumber;
  exhibitExpiredAt: BigNumber;
  url: string;
  detail: string;
  timestamp: BigNumber;
}
export type OfferChangedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ],
  OfferChangedEventObject
>;

export type OfferChangedEventFilter = TypedEventFilter<OfferChangedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Curation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchList(
      galleryIds: PromiseOrValue<BigNumberish>[],
      exhibitIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchListOwned(
      galleryIds: PromiseOrValue<BigNumberish>[],
      collections: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buy(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGallery(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      spaceType: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataUri: PromiseOrValue<string>,
      isToken: PromiseOrValue<boolean>,
      payees: PromiseOrValue<string>[],
      commissionRates: PromiseOrValue<BigNumberish>[],
      admissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    list(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listOwned(
      galleryId: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    redeemForce(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemWithFreeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replyOffer(
      offerId: PromiseOrValue<BigNumberish>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      galleryId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      offerDuration: PromiseOrValue<BigNumberish>,
      exhibitExpiredAt: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      detail: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      curator: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleWhitelist(
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBaseFeeRate(
      newFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchList(
    galleryIds: PromiseOrValue<BigNumberish>[],
    exhibitIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchListOwned(
    galleryIds: PromiseOrValue<BigNumberish>[],
    collections: PromiseOrValue<string>[],
    tokenIds: PromiseOrValue<BigNumberish>[],
    prices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buy(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGallery(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    spaceType: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    metadataUri: PromiseOrValue<string>,
    isToken: PromiseOrValue<boolean>,
    payees: PromiseOrValue<string>[],
    commissionRates: PromiseOrValue<BigNumberish>[],
    admissions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freeze(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  list(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    location: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listOwned(
    galleryId: PromiseOrValue<BigNumberish>,
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    location: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  redeemForce(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemWithFreeze(
    galleryId: PromiseOrValue<BigNumberish>,
    exhibitId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replyOffer(
    offerId: PromiseOrValue<BigNumberish>,
    accept: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendOffer(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    galleryId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    offerDuration: PromiseOrValue<BigNumberish>,
    exhibitExpiredAt: PromiseOrValue<BigNumberish>,
    url: PromiseOrValue<string>,
    detail: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    curator: PromiseOrValue<string>,
    enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleWhitelist(
    enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBaseFeeRate(
    newFeeRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    batchList(
      galleryIds: PromiseOrValue<BigNumberish>[],
      exhibitIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchListOwned(
      galleryIds: PromiseOrValue<BigNumberish>[],
      collections: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGallery(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      spaceType: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataUri: PromiseOrValue<string>,
      isToken: PromiseOrValue<boolean>,
      payees: PromiseOrValue<string>[],
      commissionRates: PromiseOrValue<BigNumberish>[],
      admissions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    freeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    list(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listOwned(
      galleryId: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    redeemForce(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemWithFreeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    replyOffer(
      offerId: PromiseOrValue<BigNumberish>,
      accept: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      galleryId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      offerDuration: PromiseOrValue<BigNumberish>,
      exhibitExpiredAt: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      detail: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(
      curator: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleWhitelist(
      enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBaseFeeRate(
      newFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExhibitChanged(uint256,string,uint256,address,uint256,address,uint64,uint256,string,string,string,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      eventType?: null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      expiration?: null,
      price?: null,
      location?: null,
      url?: null,
      detail?: null,
      timestamp?: null
    ): ExhibitChangedEventFilter;
    ExhibitChanged(
      id?: PromiseOrValue<BigNumberish> | null,
      eventType?: null,
      galleryId?: null,
      collection?: null,
      tokenId?: null,
      origin?: null,
      expiration?: null,
      price?: null,
      location?: null,
      url?: null,
      detail?: null,
      timestamp?: null
    ): ExhibitChangedEventFilter;

    "GalleryChanged(uint256,string,address,uint256,address,string,string,string,bool,uint64,address[],uint256[],address,address[])"(
      id?: PromiseOrValue<BigNumberish> | null,
      eventType?: null,
      collection?: null,
      tokenId?: null,
      owner?: null,
      spaceType?: null,
      name?: null,
      metadataUri?: null,
      isToken?: null,
      timestamp?: null,
      payees?: null,
      commissionRates?: null,
      commissionPool?: null,
      admissions?: null
    ): GalleryChangedEventFilter;
    GalleryChanged(
      id?: PromiseOrValue<BigNumberish> | null,
      eventType?: null,
      collection?: null,
      tokenId?: null,
      owner?: null,
      spaceType?: null,
      name?: null,
      metadataUri?: null,
      isToken?: null,
      timestamp?: null,
      payees?: null,
      commissionRates?: null,
      commissionPool?: null,
      admissions?: null
    ): GalleryChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OfferChanged(uint256,string,address,uint256,address,address,uint256,uint256,uint64,uint64,uint64,string,string,uint64)"(
      id?: PromiseOrValue<BigNumberish> | null,
      eventType?: null,
      collection?: null,
      tokenId?: null,
      from?: null,
      to?: null,
      price?: null,
      galleryId?: null,
      offerStartAt?: null,
      offerExpiredAt?: null,
      exhibitExpiredAt?: null,
      url?: null,
      detail?: null,
      timestamp?: null
    ): OfferChangedEventFilter;
    OfferChanged(
      id?: PromiseOrValue<BigNumberish> | null,
      eventType?: null,
      collection?: null,
      tokenId?: null,
      from?: null,
      to?: null,
      price?: null,
      galleryId?: null,
      offerStartAt?: null,
      offerExpiredAt?: null,
      exhibitExpiredAt?: null,
      url?: null,
      detail?: null,
      timestamp?: null
    ): OfferChangedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchList(
      galleryIds: PromiseOrValue<BigNumberish>[],
      exhibitIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchListOwned(
      galleryIds: PromiseOrValue<BigNumberish>[],
      collections: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buy(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGallery(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      spaceType: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataUri: PromiseOrValue<string>,
      isToken: PromiseOrValue<boolean>,
      payees: PromiseOrValue<string>[],
      commissionRates: PromiseOrValue<BigNumberish>[],
      admissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    list(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listOwned(
      galleryId: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    redeemForce(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemWithFreeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replyOffer(
      offerId: PromiseOrValue<BigNumberish>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      galleryId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      offerDuration: PromiseOrValue<BigNumberish>,
      exhibitExpiredAt: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      detail: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      curator: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleWhitelist(
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBaseFeeRate(
      newFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchList(
      galleryIds: PromiseOrValue<BigNumberish>[],
      exhibitIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchListOwned(
      galleryIds: PromiseOrValue<BigNumberish>[],
      collections: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGallery(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      spaceType: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      metadataUri: PromiseOrValue<string>,
      isToken: PromiseOrValue<boolean>,
      payees: PromiseOrValue<string>[],
      commissionRates: PromiseOrValue<BigNumberish>[],
      admissions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    list(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listOwned(
      galleryId: PromiseOrValue<BigNumberish>,
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      location: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemForce(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemWithFreeze(
      galleryId: PromiseOrValue<BigNumberish>,
      exhibitId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replyOffer(
      offerId: PromiseOrValue<BigNumberish>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendOffer(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      galleryId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      offerDuration: PromiseOrValue<BigNumberish>,
      exhibitExpiredAt: PromiseOrValue<BigNumberish>,
      url: PromiseOrValue<string>,
      detail: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      curator: PromiseOrValue<string>,
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleWhitelist(
      enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBaseFeeRate(
      newFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
